#!/usr/bin/env python3
import sys
import re
import subprocess
import time
import signal
import os

RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
RESET = "\033[0m"

def signal_handler(sig, frame):
    print("\nExiting due to signal interrupt...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def capture():
    for line in sys.stdin:
        if line.startswith("@DEBUG@"):
            line_content = line[len("@DEBUG@"):].strip()
            parts = line_content.split(" ", 1)
            if len(parts) >= 2:
                command = parts[0]
                value = parts[1]
                if command == "KRNLPANIC":
                    command = f"x86_64-elf-addr2line -e kernel/bin/kernel.elf {value}"
                    try:
                        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                        print(f"{RED}Kernel panic @ {value},{RESET}")
                        print(f"{YELLOW} - Path: {output.decode().strip()}{RESET}")
                        output = subprocess.check_output(f"./tools/addr2func {value} kernel/bin/kernel.elf", shell=True, stderr=subprocess.STDOUT)
                        print(f"{YELLOW} - Function: {output.decode().strip()}{RESET}")
                    except subprocess.CalledProcessError as e:
                        print(f"{RED}Error running addr2line: {e.output.decode().strip()}{RESET}")
                else:
                    print(f"{GREEN}Unknown command {command} with value: {value}{RESET}")
        else:
            print(line, end="")
            time.sleep(0.01)

if __name__ == "__main__":
    capture()
